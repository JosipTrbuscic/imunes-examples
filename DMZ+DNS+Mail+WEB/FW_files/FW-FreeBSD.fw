#!/bin/sh
#
#  This is automatically generated file. DO NOT MODIFY !
#
#  Firewall Builder  fwb_ipfw v5.1.0.3599
#
#  Generated Mon Nov 23 13:20:06 2015 CET by miljenko
#
# files: * FW.fw /etc/FW.fw
#
#
#
# Compiled for ipfw 
#
# This firewall has two interfaces. Eth0 faces outside and has a dynamic address; eth1 faces inside.
# Policy includes basic rules to permit unrestricted outbound access and anti-spoofing rules. Access to the firewall is permitted only from internal network and only using SSH. The firewall uses one of the machines on internal network for DNS. Internal network is configured with address 192.168.1.0/255.255.255.0

# FW:Policy:2: warning: Changing rule direction due to self reference



cd /etc || exit 1

IFCONFIG="/sbin/ifconfig"
PFCTL="/sbin/pfctl"
IPFW="/sbin/ipfw"
IPF="/sbin/ipf"
IPNAT="/sbin/ipnat"
SYSCTL="/sbin/sysctl"
LOGGER="/usr/bin/logger"

log() {
    echo "$1"
    command -v "$LOGGER" >/dev/null 2>&1 && $LOGGER -p info "$1"
}

diff_intf() {
    func=$1
    list1=$2
    list2=$3
    cmd=$4
    for intf in $list1
    do
        echo $list2 | grep -q $intf || {
        # $vlan is absent in list 2
            $func $intf $cmd
        }
    done
}


missing_address() {
    address=$1
    cmd=$2

    oldIFS=$IFS
    IFS="@"
    set $address
    addr=$1
    interface=$2
    IFS=$oldIFS

    if echo "$addr" | grep -q ':'
    then
        inet="inet6"
        addr=$(echo "$addr" | sed 's!/! prefixlen !')
    else
        inet="inet"
        addr=$(echo "$addr" | sed 's!/! netmask !')
    fi

    parameter=""
    test "$cmd" = "add" && {
      echo "# Adding ip address: $interface $addr"
      parameter="alias"
    }
    test "$cmd" = "del" && {
      echo "# Removing ip address: $interface $addr"
      parameter="delete"
    }

    $FWBDEBUG $IFCONFIG $interface $inet $addr $parameter || exit 1
    $FWBDEBUG $IFCONFIG $interface up
}

list_addresses_by_scope() {
    interface=$1
    scope=$2
    ignore_list=$3

    scope_regex="1"
    if test -n "$scope"; then scope_regex=" \$0 !~ \"$scope\" "; fi

    $IFCONFIG $interface | sed "s/%$interface//" | \
      awk -v IGNORED="$ignore_list" \
        "BEGIN {  
           split(IGNORED,ignored_arr);
           for (a in ignored_arr) {ignored_dict[ignored_arr[a]]=1;}
         }
         (/inet |inet6 / && $scope_regex && !(\$2 in ignored_dict)) {printf \"%s/%s\n\",\$2,\$4;}" | \
        while read addr; do
          echo "${addr}@$interface"
        done | sort
   
}

update_addresses_of_interface() {
    ignore_list=$2
    set $1 
    interface=$1 
    shift

    FWB_ADDRS=$(
      for addr in $*; do
        echo "${addr}@$interface"
      done | sort
    )

    CURRENT_ADDRS_ALL_SCOPES=""
    CURRENT_ADDRS_GLOBAL_SCOPE=""

    $IFCONFIG $interface >/dev/null 2>&1 && {
      CURRENT_ADDRS_ALL_SCOPES=$(list_addresses_by_scope $interface '' "$ignore_list")
      CURRENT_ADDRS_GLOBAL_SCOPE=$(list_addresses_by_scope $interface 'scopeid .*' "$ignore_list")
    } || {
      echo "# Interface $interface does not exist"
      # Stop the script if we are not in test mode
      test -z "$FWBDEBUG" && exit 1
    }


    echo "$interface" | grep -q carp && {
        diff_intf missing_address "$CURRENT_ADDRS_GLOBAL_SCOPE" "$FWB_ADDRS" del
        diff_intf missing_address "$FWB_ADDRS" "$CURRENT_ADDRS_ALL_SCOPES" add
    } || {
        diff_intf missing_address "$FWB_ADDRS" "$CURRENT_ADDRS_ALL_SCOPES" add
        diff_intf missing_address "$CURRENT_ADDRS_GLOBAL_SCOPE" "$FWB_ADDRS" del
    }
}

verify_interfaces() {
    :
    
}

set_kernel_vars() {
    :
    $SYSCTL -w net.inet.ip.forwarding=1
}

prolog_commands() {
    echo "Running prolog script"
    
}

epilog_commands() {
    echo "Running epilog script"
    
}

run_epilog_and_exit() {
    epilog_commands
    exit $1
}

configure_interfaces() {
    :
    update_addresses_of_interface "eth0 10.0.1.2/0xffffff00" ""
    update_addresses_of_interface "eth1 15.16.17.1/0xffffff00" ""
    update_addresses_of_interface "lo0 127.0.0.1/0xff000000" ""
}

log "Activating firewall script generated Mon Nov 23 13:20:06 2015 by miljenko"

set_kernel_vars
configure_interfaces
prolog_commands

"$IPFW" set disable 1
"$IPFW" add 1 set 1 check-state ip from any to any




# ================ IPv4


# ================ Rule set Policy
# 
# Rule  0 (eth0)
# anti spoofing rule
"$IPFW" add 10 set 1 drop    log all  from me  to any  in  recv eth0  || exit 1
"$IPFW" add 20 set 1 drop    log all  from 15.16.17.0/24  to any  in  recv eth0  || exit 1
"$IPFW" add 30 set 1 drop    log all  from 192.168.1.0/24  to any  in  recv eth0  || exit 1
# 
# Rule  1 (lo0)
"$IPFW" add 40 set 1 permit all  from any  to any      via  lo0 keep-state  || exit 1
# 
# Rule  2 (global)
# SSH Access to firewall is permitted
# only from private internal LAN (NAT address)
# FW:Policy:2: warning: Changing rule direction due to self reference

"$IPFW" add 50 set 1 permit tcp  from 15.16.17.2  to me 22 in  setup keep-state  || exit 1
# 
# Rule  3 (global)
# RIP between FW and R9 (unicast)
"$IPFW" add 60 set 1 permit udp  from 10.0.1.2  to 10.0.1.1 520     keep-state  || exit 1
# 
# Rule  4 (global)
"$IPFW" add 70 set 1 permit udp  from 10.0.1.2  to 224.0.0.9 520     keep-state  || exit 1
# 
# Rule  5 (global)
"$IPFW" add 80 set 1 permit udp  from 10.0.1.1  to 10.0.1.2 520     keep-state  || exit 1
# 
# Rule  6 (global)
# RIP between FW and R9 (multicast)
"$IPFW" add 90 set 1 permit udp  from 10.0.1.1  to 224.0.0.9 520     keep-state  || exit 1
# 
# Rule  7 (global)
"$IPFW" add 100 set 1 permit all  from 15.16.17.2  to any      keep-state  || exit 1
# 
# Rule  8 (global)
# Mail server receives (and sends) e-mails.
"$IPFW" add 110 set 1 permit tcp  from any  to 15.16.17.25 25     setup keep-state  || exit 1
# 
# Rule  9 (global)
# Mail server (receives and) sends e-mails.
"$IPFW" add 120 set 1 permit tcp  from 15.16.17.25  to any 25     setup keep-state  || exit 1
# 
# Rule  10 (global)
# dnsMM resolves DNS for internal hosts	
"$IPFW" add 130 set 1 permit udp  from any  to 15.16.17.18 53     keep-state  || exit 1
# 
# Rule  11 (global)
# Secondary DNS server for mm.com is dnsTel (20.0.0.2)
"$IPFW" add 140 set 1 permit tcp  from 20.0.0.2  to 15.16.17.18 53     setup keep-state  || exit 1
# 
# Rule  12 (global)
# dnsMM is DNS server for mm.com
"$IPFW" add 150 set 1 permit udp  from 15.16.17.18  to any 53     keep-state  || exit 1
# 
# Rule  13 (global)
# Web server for mm.com
"$IPFW" add 160 set 1 permit tcp  from any  to 15.16.17.80 80,443     setup keep-state  || exit 1
# 
# Rule  14 (global)
"$IPFW" add 170 set 1 drop    log all  from any  to any       || exit 1
# 
# Rule  fallback rule
#    fallback rule 
"$IPFW" add 180 set 1 drop   all  from any  to any       || exit 1

epilog_commands

"$IPFW" set swap 0 1 || exit 1
"$IPFW" delete set 1